from logging import error
from pandas.core.frame import DataFrame
import streamlit as st
import numpy as np
import pandas as pd
import requests
from requests.exceptions import HTTPError
from requests.models import Response
import json
import matplotlib
from collections import Counter
import time

st.set_page_config(
     page_title="Brottsanalys Polismyndigheten Sverige",
     page_icon="游븱",
     layout="centered",
     initial_sidebar_state="expanded",
)


symbol = st.sidebar.text_input('Stad', value='', help='S칬k p친 stad')
screen = st.sidebar.selectbox("View", ('Sammanfattning', 'H칛ndelser'))

st.title(screen)

if error:
    st.write('')

### Sammanfattning 

if screen == "Sammanfattning":
    antal_api = st.slider('Antal brott f칬r analysen', min_value=1, max_value=200, value=10)
    api_antal = st.write('Graferna visar en sammanst칛llning p친',antal_api,'inrapporterade h칛ndelser fr친n polisens system.')
    url = f'https://polisen.se/api/events?locationname={symbol}'
    st.markdown(f'Analysen nedan baserar p친 information fr친n: {symbol.title() or "Sverige"}')
    r = requests.get(url)
    respons_json = r.json()
    st.write(f"""Inh칛mtning har automatiskt skett p친 {antal_api} inrapporterade h칛ndelser fr친n polisens system. Senaste 
                        inrapporteringen skedde {respons_json[0]['datetime'][:16]} och handlande om: {respons_json[0]['summary']}""")

    chart_data= []
    datum = []
    for i in respons_json[:antal_api]:
        datum.append(i['datetime'])
        chart_data.append(i['type'])
    
    chart_data = pd.DataFrame(chart_data, columns=['Sammanfattning'])
    datum = pd.DataFrame(datum, columns=['Datum'])
    st.write(F"Datum f칬r nedan analys 칛r baserad p친 tidsramarna: {datum['Datum'].min()} --- {datum['Datum'].max()}")
    chart_data3 = chart_data['Sammanfattning'].value_counts()
    topp_brott = chart_data.value_counts().head(1)
    st.subheader(str(topp_brott).split(' ')[1])
    st.subheader(f"I urvalet som du gjorde f칬rekom det {len(chart_data)} brott i {(len(chart_data3.index))} olika brottskategorier.")



    st.subheader((str(topp_brott).split(' ')[0]))
    st.area_chart(chart_data3)

    chart_data = []
    for i in respons_json[:int(antal_api)]:
        chart_data.append(i['datetime'])

    
    chart_data_tid = pd.DataFrame(chart_data, columns=['Tid'])
    chart_data_tid['Tid'] = pd.to_datetime(chart_data_tid['Tid'])
    days = {0:'M친ndag',1:'Tisdag',2:'Onsdag',3:'Torsdag',4:'Fredag',5:'L칬rdag',6:'S칬ndag'}
    chart_data_tid['dag'] = chart_data_tid['Tid'].dt.dayofweek
    chart_data_tid['dag'] = chart_data_tid['dag'].apply(lambda x: days[x])
    st.subheader(f"Veckodag baserat p친 {len(chart_data)} brott")
    st.bar_chart(chart_data_tid['dag'].value_counts())

    chart_data_tid = chart_data_tid['Tid'].dt.hour.value_counts()
    st.subheader(f"Tid p친 dygnet d친 brottet intr칛ffade baserat p친 {len(chart_data)} brott")
    st.bar_chart(chart_data_tid)


    chart_data= []
    
    for i in respons_json[:int(antal_api)]:
        chart_data.append(i['name'])
        
    
    chart_data_namn = pd.DataFrame(chart_data, columns=['namn'])
    st.subheader('Sammanfattning brottsinfo i fallande datum/tids ordning')
    st.write('')
    N = st.slider('Antal brott', min_value=5, max_value=20, value=5)
    for i in chart_data[:N]:
        st.markdown(i)

    gps = []
    for i in respons_json[:antal_api]:
        gps.append(i['location']['gps'])
    df = DataFrame(gps,columns=['data'])
    df[['lat','lon']] = df.data.str.split(",",expand=True,)
    del df['data']
    
    df['lat'] = df['lat'].astype(float)
    df['lon'] = df['lon'].astype(float)

    st.subheader('St칛der :pushpin:')
    st.text("""
    Markeringarna visar p친 st칛der d칛r brott utifr친n dina val 
    har rapporterats in fr친n polisen.se. Ifall du v칛ljer att s칬ka 
    p친 en speficik stad kommer medelpunkten p친 staden att visas p친 kartbilden nedan
    """)
    st.map(df)
    
### H칛ndelser

if screen == 'H칛ndelser':
    antal_api = st.slider('Antal brott f칬r analysen', min_value=10, max_value=300, value=10)
    url = f'https://polisen.se/api/events?locationname={symbol}'
    st.markdown(f'Analysen nedan baserar p친 information fr친n: {symbol.title() or "Sverige"}')
    r = requests.get(url)
    respons_json = r.json()
    st.write(f"""Inh칛mtning har automatiskt skett p친 {antal_api} inrapporterade h칛ndelser fr친n polisens system. Senaste 
                        inrapporteringen skedde {respons_json[0]['datetime'][:16]} och handlande om: {respons_json[0]['summary']}""")
    
    chart_data = []
    for i in respons_json[:antal_api]:
        chart_test = {
            'Datum':i['datetime'].split(' ')[0],
            'Tid':i['datetime'].split(' ')[1],
            'Typ':i['type'],
            'Text':i['summary']}

        chart_data.append(chart_test)
    chart_data = pd.DataFrame(chart_data)
    type = chart_data['Typ'].unique()

    option = st.selectbox('V칛lj brottskategori',(type))

    valavbrott = chart_data[chart_data['Typ'] == option]
    st.text(valavbrott)

    st.subheader(f"Totalt kan {len(valavbrott.index)} brott hittas av de {antal_api} som inh칛mtas kopplat mot brottskategorin du valt som str칛cker sig mellan datumen {chart_data['Datum'].max()} - {chart_data['Datum'].min()} hittats.")

st.write('')
st.write('')
st.write('')
st.write('')
expander = st.beta_expander("FAQ")
expander.write("""Information 칛r h칛mtad fr친n Polismyndigheten och h칛mtas kontinuerligt. Syftet 칛r att f친 sammanst칛llning kring brottsligheten kopplat mot dit egna val""")
